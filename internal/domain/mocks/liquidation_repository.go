// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/ayankousky/exchange-data-importer/internal/domain"
	"sync"
	"time"
)

// LiquidationRepositoryMock is a mock implementation of domain.LiquidationRepository.
//
//	func TestSomethingThatUsesLiquidationRepository(t *testing.T) {
//
//		// make and configure a mocked domain.LiquidationRepository
//		mockedLiquidationRepository := &LiquidationRepositoryMock{
//			CreateFunc: func(ctx context.Context, l domain.Liquidation) error {
//				panic("mock out the Create method")
//			},
//			GetLiquidationsHistoryFunc: func(ctx context.Context, timeAt time.Time) (domain.LiquidationsHistory, error) {
//				panic("mock out the GetLiquidationsHistory method")
//			},
//		}
//
//		// use mockedLiquidationRepository in code that requires domain.LiquidationRepository
//		// and then make assertions.
//
//	}
type LiquidationRepositoryMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, l domain.Liquidation) error

	// GetLiquidationsHistoryFunc mocks the GetLiquidationsHistory method.
	GetLiquidationsHistoryFunc func(ctx context.Context, timeAt time.Time) (domain.LiquidationsHistory, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// L is the l argument value.
			L domain.Liquidation
		}
		// GetLiquidationsHistory holds details about calls to the GetLiquidationsHistory method.
		GetLiquidationsHistory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// TimeAt is the timeAt argument value.
			TimeAt time.Time
		}
	}
	lockCreate                 sync.RWMutex
	lockGetLiquidationsHistory sync.RWMutex
}

// Create calls CreateFunc.
func (mock *LiquidationRepositoryMock) Create(ctx context.Context, l domain.Liquidation) error {
	if mock.CreateFunc == nil {
		panic("LiquidationRepositoryMock.CreateFunc: method is nil but LiquidationRepository.Create was just called")
	}
	callInfo := struct {
		Ctx context.Context
		L   domain.Liquidation
	}{
		Ctx: ctx,
		L:   l,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, l)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedLiquidationRepository.CreateCalls())
func (mock *LiquidationRepositoryMock) CreateCalls() []struct {
	Ctx context.Context
	L   domain.Liquidation
} {
	var calls []struct {
		Ctx context.Context
		L   domain.Liquidation
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// ResetCreateCalls reset all the calls that were made to Create.
func (mock *LiquidationRepositoryMock) ResetCreateCalls() {
	mock.lockCreate.Lock()
	mock.calls.Create = nil
	mock.lockCreate.Unlock()
}

// GetLiquidationsHistory calls GetLiquidationsHistoryFunc.
func (mock *LiquidationRepositoryMock) GetLiquidationsHistory(ctx context.Context, timeAt time.Time) (domain.LiquidationsHistory, error) {
	if mock.GetLiquidationsHistoryFunc == nil {
		panic("LiquidationRepositoryMock.GetLiquidationsHistoryFunc: method is nil but LiquidationRepository.GetLiquidationsHistory was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		TimeAt time.Time
	}{
		Ctx:    ctx,
		TimeAt: timeAt,
	}
	mock.lockGetLiquidationsHistory.Lock()
	mock.calls.GetLiquidationsHistory = append(mock.calls.GetLiquidationsHistory, callInfo)
	mock.lockGetLiquidationsHistory.Unlock()
	return mock.GetLiquidationsHistoryFunc(ctx, timeAt)
}

// GetLiquidationsHistoryCalls gets all the calls that were made to GetLiquidationsHistory.
// Check the length with:
//
//	len(mockedLiquidationRepository.GetLiquidationsHistoryCalls())
func (mock *LiquidationRepositoryMock) GetLiquidationsHistoryCalls() []struct {
	Ctx    context.Context
	TimeAt time.Time
} {
	var calls []struct {
		Ctx    context.Context
		TimeAt time.Time
	}
	mock.lockGetLiquidationsHistory.RLock()
	calls = mock.calls.GetLiquidationsHistory
	mock.lockGetLiquidationsHistory.RUnlock()
	return calls
}

// ResetGetLiquidationsHistoryCalls reset all the calls that were made to GetLiquidationsHistory.
func (mock *LiquidationRepositoryMock) ResetGetLiquidationsHistoryCalls() {
	mock.lockGetLiquidationsHistory.Lock()
	mock.calls.GetLiquidationsHistory = nil
	mock.lockGetLiquidationsHistory.Unlock()
}

// ResetCalls reset all the calls that were made to all mocked methods.
func (mock *LiquidationRepositoryMock) ResetCalls() {
	mock.lockCreate.Lock()
	mock.calls.Create = nil
	mock.lockCreate.Unlock()

	mock.lockGetLiquidationsHistory.Lock()
	mock.calls.GetLiquidationsHistory = nil
	mock.lockGetLiquidationsHistory.Unlock()
}
