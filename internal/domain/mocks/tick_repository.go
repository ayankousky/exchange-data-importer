// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/ayankousky/exchange-data-importer/internal/domain"
	"sync"
	"time"
)

// TickRepositoryMock is a mock implementation of domain.TickRepository.
//
//	func TestSomethingThatUsesTickRepository(t *testing.T) {
//
//		// make and configure a mocked domain.TickRepository
//		mockedTickRepository := &TickRepositoryMock{
//			CreateFunc: func(ctx context.Context, ts domain.Tick) error {
//				panic("mock out the Create method")
//			},
//			GetHistorySinceFunc: func(ctx context.Context, since time.Time) ([]domain.Tick, error) {
//				panic("mock out the GetHistorySince method")
//			},
//		}
//
//		// use mockedTickRepository in code that requires domain.TickRepository
//		// and then make assertions.
//
//	}
type TickRepositoryMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, ts domain.Tick) error

	// GetHistorySinceFunc mocks the GetHistorySince method.
	GetHistorySinceFunc func(ctx context.Context, since time.Time) ([]domain.Tick, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ts is the ts argument value.
			Ts domain.Tick
		}
		// GetHistorySince holds details about calls to the GetHistorySince method.
		GetHistorySince []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Since is the since argument value.
			Since time.Time
		}
	}
	lockCreate          sync.RWMutex
	lockGetHistorySince sync.RWMutex
}

// Create calls CreateFunc.
func (mock *TickRepositoryMock) Create(ctx context.Context, ts domain.Tick) error {
	if mock.CreateFunc == nil {
		panic("TickRepositoryMock.CreateFunc: method is nil but TickRepository.Create was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ts  domain.Tick
	}{
		Ctx: ctx,
		Ts:  ts,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, ts)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedTickRepository.CreateCalls())
func (mock *TickRepositoryMock) CreateCalls() []struct {
	Ctx context.Context
	Ts  domain.Tick
} {
	var calls []struct {
		Ctx context.Context
		Ts  domain.Tick
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// ResetCreateCalls reset all the calls that were made to Create.
func (mock *TickRepositoryMock) ResetCreateCalls() {
	mock.lockCreate.Lock()
	mock.calls.Create = nil
	mock.lockCreate.Unlock()
}

// GetHistorySince calls GetHistorySinceFunc.
func (mock *TickRepositoryMock) GetHistorySince(ctx context.Context, since time.Time) ([]domain.Tick, error) {
	if mock.GetHistorySinceFunc == nil {
		panic("TickRepositoryMock.GetHistorySinceFunc: method is nil but TickRepository.GetHistorySince was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Since time.Time
	}{
		Ctx:   ctx,
		Since: since,
	}
	mock.lockGetHistorySince.Lock()
	mock.calls.GetHistorySince = append(mock.calls.GetHistorySince, callInfo)
	mock.lockGetHistorySince.Unlock()
	return mock.GetHistorySinceFunc(ctx, since)
}

// GetHistorySinceCalls gets all the calls that were made to GetHistorySince.
// Check the length with:
//
//	len(mockedTickRepository.GetHistorySinceCalls())
func (mock *TickRepositoryMock) GetHistorySinceCalls() []struct {
	Ctx   context.Context
	Since time.Time
} {
	var calls []struct {
		Ctx   context.Context
		Since time.Time
	}
	mock.lockGetHistorySince.RLock()
	calls = mock.calls.GetHistorySince
	mock.lockGetHistorySince.RUnlock()
	return calls
}

// ResetGetHistorySinceCalls reset all the calls that were made to GetHistorySince.
func (mock *TickRepositoryMock) ResetGetHistorySinceCalls() {
	mock.lockGetHistorySince.Lock()
	mock.calls.GetHistorySince = nil
	mock.lockGetHistorySince.Unlock()
}

// ResetCalls reset all the calls that were made to all mocked methods.
func (mock *TickRepositoryMock) ResetCalls() {
	mock.lockCreate.Lock()
	mock.calls.Create = nil
	mock.lockCreate.Unlock()

	mock.lockGetHistorySince.Lock()
	mock.calls.GetHistorySince = nil
	mock.lockGetHistorySince.Unlock()
}
