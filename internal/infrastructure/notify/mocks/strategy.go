// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/ayankousky/exchange-data-importer/internal/infrastructure/notify"
	"sync"
)

// StrategyMock is a mock implementation of notify.Strategy.
//
//	func TestSomethingThatUsesStrategy(t *testing.T) {
//
//		// make and configure a mocked notify.Strategy
//		mockedStrategy := &StrategyMock{
//			FormatFunc: func(data any) []notify.Event {
//				panic("mock out the Format method")
//			},
//		}
//
//		// use mockedStrategy in code that requires notify.Strategy
//		// and then make assertions.
//
//	}
type StrategyMock struct {
	// FormatFunc mocks the Format method.
	FormatFunc func(data any) []notify.Event

	// calls tracks calls to the methods.
	calls struct {
		// Format holds details about calls to the Format method.
		Format []struct {
			// Data is the data argument value.
			Data any
		}
	}
	lockFormat sync.RWMutex
}

// Format calls FormatFunc.
func (mock *StrategyMock) Format(data any) []notify.Event {
	if mock.FormatFunc == nil {
		panic("StrategyMock.FormatFunc: method is nil but Strategy.Format was just called")
	}
	callInfo := struct {
		Data any
	}{
		Data: data,
	}
	mock.lockFormat.Lock()
	mock.calls.Format = append(mock.calls.Format, callInfo)
	mock.lockFormat.Unlock()
	return mock.FormatFunc(data)
}

// FormatCalls gets all the calls that were made to Format.
// Check the length with:
//
//	len(mockedStrategy.FormatCalls())
func (mock *StrategyMock) FormatCalls() []struct {
	Data any
} {
	var calls []struct {
		Data any
	}
	mock.lockFormat.RLock()
	calls = mock.calls.Format
	mock.lockFormat.RUnlock()
	return calls
}

// ResetFormatCalls reset all the calls that were made to Format.
func (mock *StrategyMock) ResetFormatCalls() {
	mock.lockFormat.Lock()
	mock.calls.Format = nil
	mock.lockFormat.Unlock()
}

// ResetCalls reset all the calls that were made to all mocked methods.
func (mock *StrategyMock) ResetCalls() {
	mock.lockFormat.Lock()
	mock.calls.Format = nil
	mock.lockFormat.Unlock()
}
