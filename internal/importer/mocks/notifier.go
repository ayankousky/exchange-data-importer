// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/ayankousky/exchange-data-importer/internal/infrastructure/notify"
	"sync"
)

// NotifierServiceMock is a mock implementation of importer.NotifierService.
//
//	func TestSomethingThatUsesNotifierService(t *testing.T) {
//
//		// make and configure a mocked importer.NotifierService
//		mockedNotifierService := &NotifierServiceMock{
//			NotifyFunc: func(ctx context.Context, data any)  {
//				panic("mock out the notify method")
//			},
//			SubscribeFunc: func(topic string, client notify.Client, strategy notify.Strategy)  {
//				panic("mock out the Subscribe method")
//			},
//		}
//
//		// use mockedNotifierService in code that requires importer.NotifierService
//		// and then make assertions.
//
//	}
type NotifierServiceMock struct {
	// NotifyFunc mocks the Notify method.
	NotifyFunc func(ctx context.Context, data any)

	// SubscribeFunc mocks the Subscribe method.
	SubscribeFunc func(topic string, client notify.Client, strategy notify.Strategy)

	// calls tracks calls to the methods.
	calls struct {
		// Notify holds details about calls to the Notify method.
		Notify []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Data is the data argument value.
			Data any
		}
		// Subscribe holds details about calls to the Subscribe method.
		Subscribe []struct {
			// Topic is the topic argument value.
			Topic string
			// Client is the client argument value.
			Client notify.Client
			// Strategy is the strategy argument value.
			Strategy notify.Strategy
		}
	}
	lockNotify    sync.RWMutex
	lockSubscribe sync.RWMutex
}

// Notify calls NotifyFunc.
func (mock *NotifierServiceMock) Notify(ctx context.Context, data any) {
	if mock.NotifyFunc == nil {
		panic("NotifierServiceMock.NotifyFunc: method is nil but NotifierService.notify was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Data any
	}{
		Ctx:  ctx,
		Data: data,
	}
	mock.lockNotify.Lock()
	mock.calls.Notify = append(mock.calls.Notify, callInfo)
	mock.lockNotify.Unlock()
	mock.NotifyFunc(ctx, data)
}

// NotifyCalls gets all the calls that were made to Notify.
// Check the length with:
//
//	len(mockedNotifierService.NotifyCalls())
func (mock *NotifierServiceMock) NotifyCalls() []struct {
	Ctx  context.Context
	Data any
} {
	var calls []struct {
		Ctx  context.Context
		Data any
	}
	mock.lockNotify.RLock()
	calls = mock.calls.Notify
	mock.lockNotify.RUnlock()
	return calls
}

// ResetNotifyCalls reset all the calls that were made to Notify.
func (mock *NotifierServiceMock) ResetNotifyCalls() {
	mock.lockNotify.Lock()
	mock.calls.Notify = nil
	mock.lockNotify.Unlock()
}

// Subscribe calls SubscribeFunc.
func (mock *NotifierServiceMock) Subscribe(topic string, client notify.Client, strategy notify.Strategy) {
	if mock.SubscribeFunc == nil {
		panic("NotifierServiceMock.SubscribeFunc: method is nil but NotifierService.Subscribe was just called")
	}
	callInfo := struct {
		Topic    string
		Client   notify.Client
		Strategy notify.Strategy
	}{
		Topic:    topic,
		Client:   client,
		Strategy: strategy,
	}
	mock.lockSubscribe.Lock()
	mock.calls.Subscribe = append(mock.calls.Subscribe, callInfo)
	mock.lockSubscribe.Unlock()
	mock.SubscribeFunc(topic, client, strategy)
}

// SubscribeCalls gets all the calls that were made to Subscribe.
// Check the length with:
//
//	len(mockedNotifierService.SubscribeCalls())
func (mock *NotifierServiceMock) SubscribeCalls() []struct {
	Topic    string
	Client   notify.Client
	Strategy notify.Strategy
} {
	var calls []struct {
		Topic    string
		Client   notify.Client
		Strategy notify.Strategy
	}
	mock.lockSubscribe.RLock()
	calls = mock.calls.Subscribe
	mock.lockSubscribe.RUnlock()
	return calls
}

// ResetSubscribeCalls reset all the calls that were made to Subscribe.
func (mock *NotifierServiceMock) ResetSubscribeCalls() {
	mock.lockSubscribe.Lock()
	mock.calls.Subscribe = nil
	mock.lockSubscribe.Unlock()
}

// ResetCalls reset all the calls that were made to all mocked methods.
func (mock *NotifierServiceMock) ResetCalls() {
	mock.lockNotify.Lock()
	mock.calls.Notify = nil
	mock.lockNotify.Unlock()

	mock.lockSubscribe.Lock()
	mock.calls.Subscribe = nil
	mock.lockSubscribe.Unlock()
}
