// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/ayankousky/exchange-data-importer/internal/domain"
	"sync"
)

// RepositoryFactoryMock is a mock implementation of importer.RepositoryFactory.
//
//	func TestSomethingThatUsesRepositoryFactory(t *testing.T) {
//
//		// make and configure a mocked importer.RepositoryFactory
//		mockedRepositoryFactory := &RepositoryFactoryMock{
//			GetLiquidationRepositoryFunc: func(name string) (domain.LiquidationRepository, error) {
//				panic("mock out the GetLiquidationRepository method")
//			},
//			GetTickRepositoryFunc: func(name string) (domain.TickRepository, error) {
//				panic("mock out the GetTickRepository method")
//			},
//		}
//
//		// use mockedRepositoryFactory in code that requires importer.RepositoryFactory
//		// and then make assertions.
//
//	}
type RepositoryFactoryMock struct {
	// GetLiquidationRepositoryFunc mocks the GetLiquidationRepository method.
	GetLiquidationRepositoryFunc func(name string) (domain.LiquidationRepository, error)

	// GetTickRepositoryFunc mocks the GetTickRepository method.
	GetTickRepositoryFunc func(name string) (domain.TickRepository, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetLiquidationRepository holds details about calls to the GetLiquidationRepository method.
		GetLiquidationRepository []struct {
			// Name is the name argument value.
			Name string
		}
		// GetTickRepository holds details about calls to the GetTickRepository method.
		GetTickRepository []struct {
			// Name is the name argument value.
			Name string
		}
	}
	lockGetLiquidationRepository sync.RWMutex
	lockGetTickRepository        sync.RWMutex
}

// GetLiquidationRepository calls GetLiquidationRepositoryFunc.
func (mock *RepositoryFactoryMock) GetLiquidationRepository(name string) (domain.LiquidationRepository, error) {
	if mock.GetLiquidationRepositoryFunc == nil {
		panic("RepositoryFactoryMock.GetLiquidationRepositoryFunc: method is nil but RepositoryFactory.GetLiquidationRepository was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	mock.lockGetLiquidationRepository.Lock()
	mock.calls.GetLiquidationRepository = append(mock.calls.GetLiquidationRepository, callInfo)
	mock.lockGetLiquidationRepository.Unlock()
	return mock.GetLiquidationRepositoryFunc(name)
}

// GetLiquidationRepositoryCalls gets all the calls that were made to GetLiquidationRepository.
// Check the length with:
//
//	len(mockedRepositoryFactory.GetLiquidationRepositoryCalls())
func (mock *RepositoryFactoryMock) GetLiquidationRepositoryCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	mock.lockGetLiquidationRepository.RLock()
	calls = mock.calls.GetLiquidationRepository
	mock.lockGetLiquidationRepository.RUnlock()
	return calls
}

// ResetGetLiquidationRepositoryCalls reset all the calls that were made to GetLiquidationRepository.
func (mock *RepositoryFactoryMock) ResetGetLiquidationRepositoryCalls() {
	mock.lockGetLiquidationRepository.Lock()
	mock.calls.GetLiquidationRepository = nil
	mock.lockGetLiquidationRepository.Unlock()
}

// GetTickRepository calls GetTickRepositoryFunc.
func (mock *RepositoryFactoryMock) GetTickRepository(name string) (domain.TickRepository, error) {
	if mock.GetTickRepositoryFunc == nil {
		panic("RepositoryFactoryMock.GetTickRepositoryFunc: method is nil but RepositoryFactory.GetTickRepository was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	mock.lockGetTickRepository.Lock()
	mock.calls.GetTickRepository = append(mock.calls.GetTickRepository, callInfo)
	mock.lockGetTickRepository.Unlock()
	return mock.GetTickRepositoryFunc(name)
}

// GetTickRepositoryCalls gets all the calls that were made to GetTickRepository.
// Check the length with:
//
//	len(mockedRepositoryFactory.GetTickRepositoryCalls())
func (mock *RepositoryFactoryMock) GetTickRepositoryCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	mock.lockGetTickRepository.RLock()
	calls = mock.calls.GetTickRepository
	mock.lockGetTickRepository.RUnlock()
	return calls
}

// ResetGetTickRepositoryCalls reset all the calls that were made to GetTickRepository.
func (mock *RepositoryFactoryMock) ResetGetTickRepositoryCalls() {
	mock.lockGetTickRepository.Lock()
	mock.calls.GetTickRepository = nil
	mock.lockGetTickRepository.Unlock()
}

// ResetCalls reset all the calls that were made to all mocked methods.
func (mock *RepositoryFactoryMock) ResetCalls() {
	mock.lockGetLiquidationRepository.Lock()
	mock.calls.GetLiquidationRepository = nil
	mock.lockGetLiquidationRepository.Unlock()

	mock.lockGetTickRepository.Lock()
	mock.calls.GetTickRepository = nil
	mock.lockGetTickRepository.Unlock()
}
